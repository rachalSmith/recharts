{"ast":null,"code":"var _jsxFileName = \"/home/rachal/code/react-projects/pulled/recharts-react-star-wars-api/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport BarChartComponent from './components/BarChartComponent';\nimport LineChartComponent from './components/LineChartComponent';\nimport Header from './components/Header';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  useEffect(() => {\n    const speciesURL = 'https://swapi.dev/api/species';\n    const planetsURL = 'https://swapi.dev/api/planets'; //  Returns a raw array of data from API\n\n    const fetchSpecies = async () => {\n      try {\n        const response = await fetch(speciesURL);\n        const data = await response.json();\n        const {\n          results\n        } = data;\n        parsedSpeciesData(results);\n      } catch (error) {\n        console.log('error', error);\n      }\n    };\n\n    fetchSpecies(); //  Returns a raw array of data from API\n\n    const fetchPlanets = async () => {\n      try {\n        const response = await fetch(planetsURL);\n        const data = await response.json();\n        const {\n          results\n        } = data;\n        parsedPlanetData(results);\n      } catch (error) {\n        console.log('error', error);\n      }\n    };\n\n    fetchPlanets(); //  Returns parsed data for species and sets data as state.\n\n    const parsedSpeciesData = results => {\n      const cleanData = results.map(species => {\n        return {\n          name: species.name,\n          averageHeight: Number(species.average_height)\n        };\n      }).filter(species => !isNaN(species.averageHeight));\n      cleanData.splice(5, 4);\n      setBarData(cleanData);\n    }; //  Returns parsed data for species and sets data as state.\n\n\n    const parsedPlanetData = results => {\n      const cleanData = results.map(planets => {\n        return {\n          name: planets.name,\n          diameter: planets.diameter / 1000,\n          day: planets.rotation_period\n        };\n      }).filter(planets => planets.diameter <= 100);\n      setLineData(cleanData);\n    };\n  }, []);\n  const [barData, setBarData] = useState({});\n  const [lineData, setLineData] = useState({});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BarChartComponent, {\n      barChartData: barData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineChartComponent, {\n      lineChartData: lineData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"KoHM32Dx8uIcWhdtHxE0a+Cw/Qo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rachal/code/react-projects/pulled/recharts-react-star-wars-api/src/App.js"],"names":["BarChartComponent","LineChartComponent","Header","useState","useEffect","App","speciesURL","planetsURL","fetchSpecies","response","fetch","data","json","results","parsedSpeciesData","error","console","log","fetchPlanets","parsedPlanetData","cleanData","map","species","name","averageHeight","Number","average_height","filter","isNaN","splice","setBarData","planets","diameter","day","rotation_period","setLineData","barData","lineData"],"mappings":"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","sourcesContent":["import './App.css';\nimport BarChartComponent from './components/BarChartComponent';\nimport LineChartComponent from './components/LineChartComponent';\nimport Header from './components/Header';\n\nimport { useState, useEffect } from 'react';\n\n\nfunction App() {\n\n  useEffect(() => {\n\n    const speciesURL = 'https://swapi.dev/api/species';\n    const planetsURL = 'https://swapi.dev/api/planets';\n\n\n//  Returns a raw array of data from API\n    const fetchSpecies = async () => {\n      try {\n        const response = await fetch(speciesURL);\n        const data = await response.json();\n\n        const { results } = data;\n\n        parsedSpeciesData(results);\n      }\n      catch(error) {\n        console.log('error', error);\n      }\n    }\n    fetchSpecies();\n\n\n//  Returns a raw array of data from API\n    const fetchPlanets = async () => {\n      try {\n\n        const response = await fetch(planetsURL);\n        const data = await response.json();\n\n        const { results } = data;\n\n        parsedPlanetData(results);\n      }\n      catch(error) {\n        console.log('error', error);\n      }\n    }\n    fetchPlanets();\n\n\n//  Returns parsed data for species and sets data as state.\n    const parsedSpeciesData = (results) => {\n\n      const cleanData = results.map(species => {\n        return {\n          name: species.name,\n          averageHeight: Number(species.average_height)\n        };\n      }).filter(species => !isNaN(species.averageHeight));\n      cleanData.splice(5, 4);\n\n      setBarData(cleanData);\n    }\n\n\n//  Returns parsed data for species and sets data as state.\n    const parsedPlanetData = (results) => {\n\n      const cleanData = results.map(planets => {\n        return {\n          name: planets.name,\n          diameter: (planets.diameter) / 1000,\n          day: planets.rotation_period,\n        };\n      }).filter(planets => planets.diameter <= 100);\n\n      setLineData(cleanData);\n    }\n\n  }, [])\n\n\n  const [barData, setBarData] = useState({});\n  const [lineData, setLineData] = useState({});\n\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <BarChartComponent barChartData={barData}/>\n      <LineChartComponent lineChartData={lineData}/>\n    </div>\n  );\n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}